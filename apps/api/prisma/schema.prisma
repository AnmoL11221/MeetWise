generator client {
  provider = "prisma-client-js"
}

generator nestjs-dto {
  provider = "prisma-generator-nestjs-dto"
  output   = "../src/prisma/generated-dto"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  clerkId         String    @unique
  email           String    @unique
  name            String?
  linkedinProfile String?
  company         String?
  jobTitle        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  meetings        Meeting[] @relation("MeetingAttendees")
  createdMeetings Meeting[] @relation("MeetingCreator")
  practiceSessions PracticeSession[]
  userPersonas    UserPersona[]
  meetingNotes    MeetingNote[]
}

model Meeting {
  id            String    @id @default(cuid())
  title         String
  description   String?
  scheduledAt   DateTime?
  isPrivate     Boolean   @default(true)
  roomAccess    String    @default("INVITE_ONLY")
  agendaItems   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  creatorId     String
  attendees     User[]    @relation("MeetingAttendees")
  creator       User      @relation("MeetingCreator", fields: [creatorId], references: [id])
  
  briefingDossier BriefingDossier?
  meetingNotes    MeetingNote[]
  sharedResources SharedResource[]
  practiceSessions PracticeSession[]
}

model BriefingDossier {
  id                String   @id @default(cuid())
  meetingId         String   @unique
  meeting           Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  
  attendeeProfiles  Json?
  relevantDocuments Json?
  marketNews        Json?
  agendaAnalysis    Json?
  keyInsights       String?
  recommendations   String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MeetingNote {
  id          String   @id @default(cuid())
  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  
  title       String
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SharedResource {
  id          String   @id @default(cuid())
  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  type        String
  url         String?
  content     String?
  uploadedBy  String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExternalAttendee {
  id              String   @id @default(cuid())
  email           String
  name            String
  company         String?
  jobTitle        String?
  linkedinProfile String?
  recentActivity  Json?
  companyNews     Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PracticeSession {
  id          String   @id @default(cuid())
  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  title       String
  description String?
  userRole    String
  scenario    String
  difficulty  String
  duration    Int
  status      String
  feedback    PracticeFeedback[]
  interactions PracticeInteraction[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PracticeFeedback {
  id                String   @id @default(cuid())
  practiceSessionId String
  practiceSession   PracticeSession @relation(fields: [practiceSessionId], references: [id], onDelete: Cascade)
  
  type              String
  category          String
  score             Float?
  feedback          String
  suggestions       Json?
  audioUrl          String?
  timestamp         DateTime
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PracticeInteraction {
  id                String   @id @default(cuid())
  practiceSessionId String
  practiceSession   PracticeSession @relation(fields: [practiceSessionId], references: [id], onDelete: Cascade)
  
  speaker           String
  message           String
  messageType       String
  timestamp         DateTime
  personaId         String?
  persona           Persona? @relation(fields: [personaId], references: [id])
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Persona {
  id          String   @id @default(cuid())
  name        String
  role        String
  company     String?
  personality String
  background  String
  expertise   String
  communicationStyle String
  typicalQuestions Json?
  interactions PracticeInteraction[]
  userPersonas UserPersona[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPersona {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  personaId String
  persona   Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}